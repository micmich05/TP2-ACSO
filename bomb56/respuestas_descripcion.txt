mail: mmichanie@udesa.edu.ar
nombre: Micol Michanie

Fase 1
En esta fase la bomba recibe un string y lo compara con un string esperado usando strings_not_equal. Se  carga en el registro rsi la dirección calculada como rip+0xc7c62.
En caso de que sean distintos, la bomba explota. En caso contrario, no explota. Se accedio al registro 
rsi usando  x/s  para obtener el string esperado con un breakpoint en strings_not_equal.

Respuesta: Junta esperencia en la vida  Porque nada ensenha tanto Como el sufrir y el llorar

Fase 2
Se recibe un string con dos números enteros: primer_numero_ingresado y segundo_numero_ingresado. La logica principal de la clase de da cuando llama a una funcion misterio que ejecuta una serie de operaciones aritmeticas sobre los parametros de entrada. Básicamente las condiciones que tienen que cumplirse para que la bomba no explote son:
    a - Haber exactamente 11 bits -guarda 0xa en edx- en primer_numero_ingresado
    b - primer_numero_ingresado XOR segundo_numero_ingresado < 0 (bit mas significativo en 1)
Si ambas caracteristicas se cumplen, se pasa la fase 2. Sino, explota.
Una solucion sencilla es: 2047 (11 unos exactamente) y 2147485695 (en ese orden). En particular, 
11111111111 XOR 10000000000000000000011111111111 = 10000000000000000000000000000000 (bit más significativo en 1, negativo).

Respuesta: 2047 2147485695

Fase 3:
Se reciben un string y un numero entero. La fase llama a la funcion cuenta, que accede al archivo palabras.txt (que esta ordenado alfabeticamente)
y hace una busqueda binaria sobre este. El target de la busqueda es el string (clave) pasado por parametro. La funcion tiene que hacer como minimo 6 (sin incluir) pasos de la busqueda binaria (iteraciones) y como maximo 11 (incluido). Si hace mas de 11 iteraciones, explota.
Si se cumplen todas las condiciones anteriores y encuentra la palabra, se fija si el numero entero pasado como parametro (clave) es igual a la cantidad de iteraciones que realizo, sino explota.
Si todo esto se cumple, se pasa la fase 3. Para obtener una solucion valida, se corrio un scrypt de python que simulaba la busqueda binaria e imprimia las soluciones. Se encuentran todas las palabras del archivo palabras.txt que necesitan de 7 a 11 iteraciones/pasos para ser halladas con busqueda binaria. Elegi una respuesta arbitraria chequeando que la palabra no sea muy extensa por si hay alguna restriccion en el procesamiento del string.

Finalmente, la clave elegida fue forrear (string) 10 (iteraciones). La funcion que genera las soluciones es soluciones_validas en phase_3_aux.

Respuesta: forrear 10

Fase 4:

La fase recibe dos numeros enteros. La lógica en terminos generales es la siguiente:
Arranca por un número i (primer entero pasado), representando el índice del un número en un arreglo de enteros, que tiene su primer elemento en rsi (index=0). Despues, indexa el arreglo de la forma numero=arreglo[i],
y usa ese número como nuevo índice. Usa esa logica para recorrer el arreglo hasta hacer exactamente 6 pasos, esperando llegar finalmente a i = 15. Además, a medida que recorre los 
índices va acumulando la suma de los números que ve, que compara con el segundo entero pasado como clave cuando termina de recorrer el arreglo. Si no llega al 15 en exactamente 6 pasos o no se pasa la suma total correctamente, explota.

Para resolver la fase, se accedio al arreglo en memoria, que resulto ser: [7, 4, 6, 8, 13, 10, 15, 9, 0, 12, 3, 5, 2, 11, 1, 14]

Arranco desde donde quiero llegar, el numero 15, y voy pensado los pasos para atras que deberia hacer para llegar hasta ahi:

Si quiero 15 --> necesito llegar al 6 (porque el numero 15 tiene el indice 6 asociado al arreglo)
Si quiero un 6 --> 2 (analogo al caso anterior, repito esto hasta hacer exactamente 6 pasos)
Si quiero un 2 -–> 12
Si quiero un 12 --> 9
Si quiero un 9 --> 7
Si quiero un 7 --> paso 0

suma final = 7 + 9 + 12 + 2 + 6 + 15

Por lo tanto, la solucion es:  0 (índice) 51 (suma final)

Respuesta: 0 51



